import os
import time
import requests
from dotenv import load_dotenv
from sendgrid.helpers.mail import Mail
from sendgrid import SendGridAPIClient
from newsplease import NewsPlease
import google.generativeai as palm
from  main import get_users

project_folder = os.path.expanduser('/home/GiridharNair/mysite')
load_dotenv(os.path.join(project_folder, '.env'))

palm.configure(api_key=os.getenv('AI_API_KEY'))
nyt_key = os.getenv('NYT_API_KEY')

ARTICLE_COUNT = 3
API_REQUEST_INTERVAL = 8
DEFAULTS = {
    'model': 'models/text-bison-001',
    'temperature': 0.6,
    'candidate_count': 1,
    'top_k': 40,
    'top_p': 0.95,
    'max_output_tokens': 1024,
    'stop_sequences': [],
    'safety_settings': [{"category": "HARM_CATEGORY_DEROGATORY", "threshold": 3},
                        {"category": "HARM_CATEGORY_TOXICITY", "threshold": 3},
                        {"category": "HARM_CATEGORY_VIOLENCE", "threshold": 3},
                        {"category": "HARM_CATEGORY_SEXUAL", "threshold": 3},
                        {"category": "HARM_CATEGORY_MEDICAL", "threshold": 3},
                        {"category": "HARM_CATEGORY_DANGEROUS", "threshold": 3}],
}


class NewsSummarizer:
    """
    A class responsible for collecting and summarizing top news articles from various categories.
    """
    def __init__(self):
        """
        Initializes the NewsSummarizer object with a list of news categories and an empty dictionary to store articles.
        """
        self.categories = [
            "arts", "automobiles", "business", "fashion", "food",
            "health", "home", "insider", "magazine", "movies",
            "politics", "realestate", "nyregion", "science", "sports",
            "technology", "theater", "travel", "us", "world"
        ]
        self.categories_dict = {category: [] for category in self.categories}

    def get_top_headlines_for_categories(self):
        """
        Fetches top headlines for each news category and stores the scraped articles in the categories dictionary.
        """
        for category in self.categories:
            response = requests.get(f'https://api.nytimes.com/svc/topstories/v2/{category}.json?api-key={nyt_key}')
            valid_articles_count = 0

            if response.status_code == 200:
                articles_data = response.json().get('results', [])

                for article_data in articles_data:
                    if valid_articles_count >= ARTICLE_COUNT:
                        break

                    scraped_article = extract_article_details(article_data.get("url"),
                                                              article_data.get("title"),
                                                              category)
                    if scraped_article:
                        valid_articles_count += 1
                        self.categories_dict[category].append(scraped_article)
            else:
                print(f"Error fetching articles for {category}: {response.status_code}")
            time.sleep(API_REQUEST_INTERVAL)

    def get_summarized_news(self):
        """
        Gathers top headlines for categories and returns the summarized articles in a dictionary.

        Returns:
            dict: A dictionary containing summarized news articles categorized by topics.
        """
        self.get_top_headlines_for_categories()
        return self.categories_dict


def summarize_article(content):
    """
    Summarizes the given article content using the PALM text generation API.

    Args:
        content (str): The content of the article to be summarized.

    Returns:
        str: The summarized article generated by the PALM API.
    """
    prompt = f"""Summarize this news article in a comprehensive paragraph,
    without using bullet points:{content}"""
    response = palm.generate_text(
        **DEFAULTS,
        prompt=prompt
    )
    if response is not None:
        return response.result
    else:
        return ""


def email_subscribers():
    """
    Sends personalized daily newsletters to subscribers with summarized articles based on their preferences.
    """
    subscribers = get_users()
    summarized_articles = NewsSummarizer().get_summarized_news()

    for subscriber in subscribers:
        user_id, first_name, last_name, email, categories = subscriber
        categories_list = categories.split(',')
        print(categories_list)
        email_body = f"<p>Hey {first_name} {last_name}, here is YourDailyRundown!</p>"
        for category in categories_list:
            email_body += f"<h2>{category.capitalize()}</h2>\n\n"
            for article in summarized_articles[category.lower()]:
                title, summarized_content = article.split("<br/><br/>")
                email_body += f"<p><strong>{title}</strong></p>\n\n"
                email_body += f"{summarized_content}<br/><br/>"
        email_body += f"<a href='https://giridharnair.pythonanywhere.com/{email}/unsubscribe'>Want to unsubscribe?</a>"

        news_letter = Mail(
            from_email='yourdailyrundown@gmail.com',
            to_emails=email,
            subject='Your Daily Rundown',
            html_content=email_body
        )

        try:
            response = SendGridAPIClient(os.getenv('SENDGRID_API_KEY')).send(news_letter)
            print(f"Email sent to {email}, status code: {response.status_code}")
        except Exception as e:
            print(f"Failed to send email to {email}. Error: {str(e)}")


def extract_article_details(article_url, article_title, category):
    """
    Extracts article details from the provided URL and summarizes the article content.

    Args:
        article_url (str): The URL of the article.
        article_title (str): The title of the article.
        category (str): The category of the article.

    Returns:
        str: The HTML-formatted article details with summarized content.
    """
    article = NewsPlease.from_url(article_url)
    try:
        content = article.maintext
        summarized_content = summarize_article(content)
    except Exception as e:
        print(f"Error summarizing article in {category.title()}: {str(e)}")
        return

    if summarized_content is not None:
        return f'<a href={article_url}>{article_title}</a><br/><br/>{summarized_content}'


if __name__ == "__main__":
    email_subscribers()
